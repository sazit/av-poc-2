# Sample YAML file to validate and export an ARM template into a build artifact
# Requires a package.json file located in the target repository

trigger:
- main #collaboration branch

pool:
  vmImage: 'ubuntu-latest'

steps:

# Installs Node and the npm packages saved in your package.json file in the build

- task: NodeTool@0
  inputs:
    versionSpec: '14.x'
  displayName: 'Install Node.js'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.Repository.LocalPath)/build' #replace with the package.json folder
    verbose: true
  displayName: 'Install npm package'

# Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
# Enter the appropriate subscription and name for the source factory. Either of the "Validate" or "Validate and Generate ARM temmplate" options are required to perform validation. Running both is unnecessary.

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: '$(Build.Repository.LocalPath)/build' #replace with the package.json folder
    customCommand: 'run build validate $(Build.Repository.LocalPath)/ /subscriptions/2575de18-863d-44bf-a54d-629d623ff88e/resourceGroups/rg-av-adfpoc-sg/providers/Microsoft.DataFactory/factories/adf-av-dev-sg
'
  displayName: 'Validate'

# Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
# The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 

- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: '$(Build.Repository.LocalPath)/build' #replace with the package.json folder
    customCommand: 'run build export $(Build.Repository.LocalPath)/ /subscriptions/2575de18-863d-44bf-a54d-629d623ff88e/resourceGroups/rg-av-adfpoc-sg/providers/Microsoft.DataFactory/factories/adf-av-dev-sg "ArmTemplate"'
#For using preview that allows you to only stop/ start triggers that are modified, please comment out the above line and uncomment the below line. Make sure the package.json contains the build-preview command. 
 #customCommand: 'run build-preview export $(Build.Repository.LocalPath) /subscriptions/222f1459-6ebd-4896-82ab-652d5f6883cf/resourceGroups/GartnerMQ2021/providers/Microsoft.DataFactory/factories/Dev-GartnerMQ2021-DataFactory "ArmTemplate"'
  displayName: 'Validate and Generate ARM template'

# Publish the artifact to be used as a source for a release pipeline.

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.Repository.LocalPath)/build/ArmTemplate' #replace with the package.json folder
    artifact: 'ArmTemplatesLP'
    publishLocation: 'pipeline'

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/build/ArmTemplate' #replace with the package.json folder
    artifact: 'ArmTemplatesSD'
    publishLocation: 'pipeline'
  
  
# - task: PublishPipelineArtifact@1
#   displayName: 'Publish'
#   inputs:
#     targetPath: $(Build.ArtifactStagingDirectory)/**
#     ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
#         artifactName: 'prod'
#     ${{ else }}:
#         artifactName: 'dev'
#     artifactType: 'pipeline'


# # Publish build artifacts v1
# # Publish build artifacts to Azure Pipelines or a Windows file share.
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'drop' 
#     publishLocation: 'Container' 